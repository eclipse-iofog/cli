steps:
- task: DownloadBuildArtifacts@0
  displayName: 'Download Build Artifacts'
  inputs:
    artifactName: linux
    downloadPath: $(System.DefaultWorkingDirectory)
- script: |
    sudo cp $(System.DefaultWorkingDirectory)/linux/iofogctl /usr/local/bin/
    sudo chmod 0755 /usr/local/bin/iofogctl
- template: postinstall-steps.yaml
- template: ssh-steps.yaml
- template: functional-init-vm-steps.yaml
- template: functional-configure.yaml
- script: |
    echo $(Agent.TempDirectory)/id_rsa > /tmp/id_rsa
    chmod 400 /tmp/id_rsa
    cssh='ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i /tmp/id_rsa'
    for agent in $(agent_vm_list); do
      echo "Waiting for VM $agent"
      iter=0
      while ! $cssh $agent -- echo "SSH success" && [ $iter -lt 15 ]; do
        iter=$((iter+1))
        sleep 5
      done
      if [ ! $iter -lt 15 ]; then
        echo "Timed out waiting for $agent"
        exit 1
      fi
    done
    if [ $(controller_count) -gt 0 ]; then
      echo "Waiting for VM $(controller_vm)"
      iter=0
      while ! $cssh $(controller_vm) -- echo "SSH success" && [ $iter -lt 15 ]; do
        iter=$((iter+1))
        sleep 5
      done
      if [ ! $iter -lt 15 ]; then
        echo "Timed out waiting for $(controller_vm)"
        exit 1
      fi
    fi
  displayName: 'Wait for VM SSH access'
- script: |
    set -o pipefail
    test/run.bash functional-vanilla | tee test/conf/results-functional-vanilla.tap
  displayName: 'Run Functional Tests'
- script: |
    tap-junit -i test/conf/results-functional-vanilla.tap -o test/conf -s Vanilla -n results-functional-vanilla.xml || true
  displayName: 'Convert test output from TAP to JUnit'
  condition: succeededOrFailed()
- template: functional-post-test.yaml
- template: functional-clean-vm.yaml