trigger:
  tags:
    include:
      - v*
  branches:
    include:
      - develop
      - release/*
  paths:
    exclude:
      - README.md
      - docs/

variables:
  build: $(Build.BuildId)
  jobuuid: $(Build.BuildId)$(Agent.Id)
  GOROOT: '/usr/local/go1.12'
  GOPATH: '/tmp/go'
  GOBIN:  '$(GOPATH)/bin'
  ref: $(Build.SourceBranch)
  branch: $(Build.SourceBranchName)
  controller_image: 'gcr.io/focal-freedom-236620/controller:develop'
  enterprise_image: 'gcr.io/focal-freedom-236620/enterprise-controller:latest'
  connector_image: 'gcr.io/focal-freedom-236620/connector:develop'
  agent_image: 'gcr.io/focal-freedom-236620/agent:develop'
  version:
  agent_count:
  controller_count:
  distro:
  repo:
  agent_vm_list:
  controller_vm:

stages:
- stage: Build
  jobs:
  - template: templates/build-job.yaml
    parameters:
      os: linux
  - template: templates/build-job.yaml
    parameters:
      os: darwin
  - template: templates/build-job.yaml
    parameters:
      os: windows
    
- stage: Test
  jobs:
  - job: Vanilla_Xenial
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - script: |
        echo "##vso[task.setvariable variable=distro]$(gcp.vm.distro.xenial)"
        echo "##vso[task.setvariable variable=repo]$(gcp.vm.repo.ubuntu)"
        echo "##vso[task.setvariable variable=agent_count]1"
        echo "##vso[task.setvariable variable=controller_count]1"
      displayName: 'Set VM variables'
    - template: templates/test-vanilla-steps.yaml
  - job: Vanilla_Bionic
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - script: |
        echo "##vso[task.setvariable variable=distro]$(gcp.vm.distro.bionic)"
        echo "##vso[task.setvariable variable=repo]$(gcp.vm.repo.ubuntu)"
        echo "##vso[task.setvariable variable=agent_count]1"
        echo "##vso[task.setvariable variable=controller_count]1"
      displayName: 'Set VM variables'
    - script: |
      displayName: 'Set VM Distros'
    - template: templates/test-vanilla-steps.yaml
  - job: Vanilla_Buster
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - script: |
        echo "##vso[task.setvariable variable=distro]$(gcp.vm.distro.buster)"
        echo "##vso[task.setvariable variable=repo]$(gcp.vm.repo.debian)"
        echo "##vso[task.setvariable variable=agent_count]1"
        echo "##vso[task.setvariable variable=controller_count]1"
      displayName: 'Set VM variables'
    - template: templates/test-vanilla-steps.yaml
  - job: Vanilla_Stretch
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - script: |
        echo "##vso[task.setvariable variable=distro]$(gcp.vm.distro.stretch)"
        echo "##vso[task.setvariable variable=repo]$(gcp.vm.repo.debian)"
        echo "##vso[task.setvariable variable=agent_count]1"
        echo "##vso[task.setvariable variable=controller_count]1"
      displayName: 'Set VM variables'
    - template: templates/test-vanilla-steps.yaml
  - job: Local
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - template: templates/init-gcloud-steps.yaml
    - script: |
        gcloud --quiet auth configure-docker
        docker pull $(controller_image)
        docker pull $(agent_image)
        docker pull $(connector_image)
      displayName: 'Pull develop gcr docker image'
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: linux
        downloadPath: $(System.DefaultWorkingDirectory)
    - script: |
        sudo cp $(System.DefaultWorkingDirectory)/linux/iofogctl /usr/local/bin/
        sudo chmod 0755 /usr/local/bin/iofogctl
    - template: templates/postinstall-steps.yaml
    - script: |
        sed -i "s|CONTROLLER_IMAGE=.*|CONTROLLER_IMAGE=\"$(controller_image)\"|g" test/env.sh
        sed -i "s|CONNECTOR_IMAGE=.*|CONNECTOR_IMAGE=\"$(connector_image)\"|g" test/env.sh
        sed -i "s|AGENT_IMAGE=.*|AGENT_IMAGE=\"$(agent_image)\"|g" test/env.sh
      displayName: 'Configure Local Tests'
    - template: templates/functional-configure.yaml
    - script: |
        set -o pipefail
        test/run.bash functional-local | tee test/conf/results-functional-local.tap
      displayName: 'Run Functional Tests'
    - script: |
        tap-junit -i test/conf/results-functional-local.tap -o test/conf -s Local -n results-functional-local.xml || true
      displayName: 'Convert test output from TAP to JUnit'
      condition: succeededOrFailed()
    - template: templates/functional-post-test.yaml
    - script: |
        docker system prune -af
      condition: always()
      displayName: 'Clean local docker'
  - job: K8s
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: linux
        downloadPath: $(System.DefaultWorkingDirectory)
    - script: |
        sudo cp $(System.DefaultWorkingDirectory)/linux/iofogctl /usr/local/bin/
        sudo chmod 0755 /usr/local/bin/iofogctl
    - template: templates/postinstall-steps.yaml
    - template: templates/ssh-steps.yaml
    - script: |
        echo "##vso[task.setvariable variable=distro]$(gcp.vm.distro.stretch)"
        echo "##vso[task.setvariable variable=repo]$(gcp.vm.repo.debian)"
        echo "##vso[task.setvariable variable=agent_count]2"
        echo "##vso[task.setvariable variable=controller_count]0"
      displayName: 'Set VM variables'
    - template: templates/functional-init-vm-steps.yaml
    - script: |
        gcloud --quiet container clusters get-credentials $(gcp.cluster.name) --region $(gcp.cluster.region)
      displayName: 'Connect to cluster'
    - template: templates/functional-configure.yaml
    - script: |
        set -o pipefail
        test/run.bash functional-k8s | tee test/conf/results-functional-k8s.tap
      displayName: 'Run Functional Tests'
    - script: |
        tap-junit -i test/conf/results-functional-k8s.tap -o test/conf -s K8s -n results-functional-k8s.xml || true
      displayName: 'Convert test output from TAP to JUnit'
      condition: succeededOrFailed()
    - script: |
          test/clean.bash $(jobuuid)
      displayName: 'Clean K8s Cluster'
      condition: always()
    - template: templates/functional-post-test.yaml
    - template: templates/functional-clean-vm.yaml
  - job: HA
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: linux
        downloadPath: $(System.DefaultWorkingDirectory)
    - script: |
        sudo cp $(System.DefaultWorkingDirectory)/linux/iofogctl /usr/local/bin/
        sudo chmod 0755 /usr/local/bin/iofogctl
    - template: templates/postinstall-steps.yaml
    - template: templates/ssh-steps.yaml
    - script: |
        echo "##vso[task.setvariable variable=distro]$(gcp.vm.distro.buster)"
        echo "##vso[task.setvariable variable=repo]$(gcp.vm.repo.debian)"
        echo "##vso[task.setvariable variable=agent_count]2"
        echo "##vso[task.setvariable variable=controller_count]0"
      displayName: 'Set VM variables'
    - template: templates/functional-init-vm-steps.yaml
    - script: |
        gcloud --quiet container clusters get-credentials $(gcp.cluster.name) --region $(gcp.cluster.region)
      displayName: 'Connect to cluster'
    - script: |
        sed -i "s|DB_PROVIDER=.*|DB_PROVIDER=\"postgres\"|g" test/env.sh
        sed -i "s|DB_USER=.*|DB_USER=\"$(db.user)\"|g" test/env.sh
        sed -i "s|DB_HOST=.*|DB_HOST=\"postgres-postgresql.postgres.svc.cluster.local\"|g" test/env.sh
        sed -i "s|DB_PORT=.*|DB_PORT=5432|g" test/env.sh
        sed -i "s|DB_PW=.*|DB_PW=\"$(db.pw)\"|g" test/env.sh
        sed -i "s|DB_NAME=.*|DB_NAME=\"iofog$(jobuuid)\"|g" test/env.sh
        sed -i "s|CONTROLLER_IMAGE=.*|CONTROLLER_IMAGE=\"$(enterprise_image)\"|g" test/env.sh
      displayName: 'Set up Postgres on K8s cluster'
    - template: templates/functional-configure.yaml
    - script: |
        set -o pipefail
        test/run.bash functional-ha | tee test/conf/results-functional-ha.tap
      displayName: 'Run Functional Tests'
    - script: |
        tap-junit -i test/conf/results-functional-ha.tap -o test/conf -s HA -n results-functional-ha.xml || true
      displayName: 'Convert test output from TAP to JUnit'
      condition: succeededOrFailed()
    - script: |
          test/clean.bash $(jobuuid)
      displayName: 'Clean K8s Cluster'
      condition: always()
    - template: templates/functional-post-test.yaml
    - template: templates/functional-clean-vm.yaml

- stage: Publish
  condition: or(and(succeeded(), startsWith(variables['build.sourceBranch'], 'refs/heads/release/')), and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/develop')), and(succeeded(), startsWith(variables['build.sourceBranch'], 'refs/tags/')))
  jobs:
  - job: OSX
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: darwin
        downloadPath: $(System.DefaultWorkingDirectory)
    - template: templates/init-gcloud-steps.yaml
    - template: templates/version-steps.yaml
    - template: templates/ssh-steps.yaml
    - script: |
        . version
        short_version=$MAJOR.$MINOR
        tar -zcf iofogctl.tar.gz darwin/iofogctl
        checksum=$(shasum -a 256 iofogctl.tar.gz | awk '{ print $1 }')
        gsutil cp iofogctl.tar.gz gs://iofogctl/osx/dev/$short_version/
        gsutil acl set public-read  gs://iofogctl/osx/dev/$short_version/iofogctl.tar.gz
        git config --global user.email "serge@edgeworx.io"
        git config --global user.name "Serge Radinovich"
        git clone git@github.com:eclipse-iofog/homebrew-iofogctl.git
        cd homebrew-iofogctl
        brew_file=iofogctl@$MAJOR.$MINOR.rb
        if [ ! -f $brew_file ]; then
          cat ../templates/brew.tpl > $brew_file
          sed -i "s/<AT_VERSION>/$MAJOR$MINOR/g" $brew_file
          sed -i "s/<DEV_SHA256>/$checksum/g" $brew_file
          sed -i "s/<DEV_VERSION>/$(version)/g" $brew_file
        else
          sed -i "s/    sha256.*/    sha256 \"$checksum\"/g" $brew_file
          sed -i "s/    version.*/    version \"$(version)\"/g" $brew_file
          sed -i "s|    url .*|    url \"https://storage.googleapis.com/iofogctl/osx/dev/$short_version/iofogctl.tar.gz\"|g" $brew_file
        fi
        git add $brew_file
        git commit -m "Publish develop version $(version)"
        git push origin master
      displayName: 'Build and publish OSX binary'
  - job: Debian
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: linux
        downloadPath: $(System.DefaultWorkingDirectory)
    - script: |
        sudo cp $(System.DefaultWorkingDirectory)/linux/iofogctl /usr/local/bin/
        sudo chmod 0755 /usr/local/bin/iofogctl
    - template: templates/version-steps.yaml
    - template: templates/publish-deps.yaml
    - script: |
        fpm -f -s dir -t deb -n iofogctl -v $(version) /usr/local/bin/iofogctl=/usr/local/bin/
        package=$(ls | grep *.deb)
        echo $package
        cp $package $(Build.ArtifactStagingDirectory)
      displayName: 'Create Debian package'
    - script: |
        package=$(ls | grep *.deb)
        echo "package..."
        echo $package
        declare -a UBUNTU_VERS=("xenial" "bionic")
        declare -a DEBIAN_VERS=("stretch" "buster")
        for ubu in "${UBUNTU_VERS[@]}"
        do
            package_cloud yank iofog/iofogctl-snapshots/ubuntu/${ubu} $package --config=$(Agent.TempDirectory)/package_cloud || true
            package_cloud push iofog/iofogctl-snapshots/ubuntu/${ubu} $package --config=$(Agent.TempDirectory)/package_cloud
        done
        for deb in "${DEBIAN_VERS[@]}"
        do
            package_cloud yank iofog/iofogctl-snapshots/debian/${deb} $package --config=$(Agent.TempDirectory)/package_cloud || true
            package_cloud push iofog/iofogctl-snapshots/debian/${deb} $package --config=$(Agent.TempDirectory)/package_cloud
        done
      displayName: 'Publish deb to package-cloud'
  - job: RPM
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: linux
        downloadPath: $(System.DefaultWorkingDirectory)
    - script: sudo cp $(System.DefaultWorkingDirectory)/linux/iofogctl /usr/local/bin/
    - template: templates/version-steps.yaml
    - template: templates/publish-deps.yaml
    - script: |
        fpm -f -s dir -t rpm -n iofogctl -v $(version) /usr/local/bin/iofogctl=/usr/local/bin/
        package=$(ls | grep *.rpm)
        echo $package
        cp $package $(Build.ArtifactStagingDirectory)
      displayName: 'Create RPM package'
    - script: |
        package=$(ls | grep *.rpm)
        echo "package..."
        echo $package
        declare -a FEDORA_VERS=("23" "24")
        declare -a REDHAT_VERS=("6" "7")
        for fed in ${FEDORA_VERS[@]}
        do
            package_cloud yank iofog/iofogctl-snapshots/fedora/${fed} $package --config=$(Agent.TempDirectory)/package_cloud || true
            package_cloud push iofog/iofogctl-snapshots/fedora/${fed} $package --config=$(Agent.TempDirectory)/package_cloud
        done
        for red in ${REDHAT_VERS[@]}
        do
            package_cloud yank iofog/iofogctl-snapshots/el/${red} $package --config=$(Agent.TempDirectory)/package_cloud || true
            package_cloud push iofog/iofogctl-snapshots/el/${red} $package --config=$(Agent.TempDirectory)/package_cloud
        done
      displayName: 'Publish RPM to package-cloud'
  - job: Windows
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: windows
        downloadPath: $(System.DefaultWorkingDirectory)
    - template: templates/init-gcloud-steps.yaml
    - template: templates/version-steps.yaml
    - template: templates/ssh-steps.yaml
    - script: |
        . version
        DIR="$(gcp.bucket)/win/dev/$MAJOR.$MINOR"
        gsutil cp windows/iofogctl gs://$DIR/iofogctl.exe
        gsutil acl set public-read  gs://$DIR/iofogctl.exe
      displayName: 'Publish Windows binary'
 