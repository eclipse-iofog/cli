trigger:
  tags:
    include:
      - v*
  branches:
    include:
      - develop
      - release/*
  paths:
    exclude:
      - README.md
      - docs/

variables:
  build: $(Build.BuildId)
  jobuuid: $(Build.BuildId)$(Agent.Id)
  GOROOT: '/usr/local/go1.12'
  GOPATH: '/tmp/go'
  GOBIN:  '$(GOPATH)/bin'
  ref: $(Build.SourceBranch)
  branch: $(Build.SourceBranchName)
  controller_image: 'gcr.io/focal-freedom-236620/controller:develop'
  enterprise_image: 'gcr.io/focal-freedom-236620/enterprise-controller:latest'
  connector_image: 'gcr.io/focal-freedom-236620/connector:develop'
  agent_image: 'gcr.io/focal-freedom-236620/agent:develop'
  version:
  agent_vm_list:
  controller_vm:
  windows_ssh_key_path: 'C:/Users/$(azure.windows.user)/.ssh'
  ssh_key_file: 'id_rsa'
  windows_kube_config_path: 'C:/Users/$(azure.windows.user)/.kube/config'

stages:

- stage: Build
  jobs:

  - template: templates/build-job.yaml
    parameters:
      os: linux

  - template: templates/build-job.yaml
    parameters:
      os: darwin

  - template: templates/build-job.yaml
    parameters:
      os: windows
    
- stage: Test
  jobs:

  - job: Windows_K8s
    condition: or(and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/develop')), and(succeeded(), startsWith(variables['build.sourceBranch'], 'refs/tags/')))
    pool: 'Azure Windows'
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: windows
        downloadPath: $(System.DefaultWorkingDirectory)
    - bash: |
        dir=$(wslpath "C:\Users\$(azure.windows.user)\AppData\Local\Microsoft\WindowsApps")
        echo moving
        mv windows/iofogctl $dir/

        echo chmodding
        chmod +x $dir/iofogctl

        echo version
        $dir/iofogctl version
        iofogctl version
      displayName: 'Prepare iofogctl binary'
    - bash: |
        tempBashPath=$(wslpath "$(Agent.TempDirectory)")
        cd $tempBashPath
        git clone https://github.com/bats-core/bats-core.git && cd bats-core && git checkout tags/v1.1.0 && ./install.sh /usr
        bats --version
      displayName: 'Install Bats'
    - bash: |
        for suffix in bash sh bats; do
          for file in $(find ./test -name "*.$suffix"); do
            dos2unix -o $file
          done
        done
      displayName: 'Format test files'
    - template: templates/ssh-steps.yaml
    - template: templates/functional-init-vm-steps.yaml
      parameters:
        id: wink8s$(build)
        distro: $(gcp.vm.distro.stretch)
        repo: $(gcp.vm.repo.debian)
        agent_count: 2
        controller_count: 0
        windows: 'true'
    - template: templates/configure-remote-tests.yaml
      parameters:
        windows: 'true'
    - task: DownloadSecureFile@1
      displayName: 'Download SSH keys to'
      name: 'gcp_iofogctl_rsa'
      inputs:
        secureFile: 'gcp_iofogctl_rsa'
    - bash: |
        destFolder=$(wslpath "$(windows_ssh_key_path)")
        echo "SSH downloaded at $(gcp_iofogctl_rsa.secureFilePath)"
        echo "Converting windows path to bash path"
        bashPath=$(wslpath "$(gcp_iofogctl_rsa.secureFilePath)")
        echo "Bash path = $bashPath"
        ls $bashPath
        mkdir -p $destFolder
        cp $bashPath $destFolder/$(ssh_key_file)
        echo "Copied SSH fey from $bashPath to $destFolder"
        chmod 0700 $destFolder
        chmod 0600 $destFolder/$(ssh_key_file)
        ls -la $destFolder
      displayName: Prepare SSH key
    - bash: |
        sed -i "s|KEY_FILE=.*|KEY_FILE=\"$(windows_ssh_key_path)/$(ssh_key_file)\"|g" test/conf/env.sh
        sed -i "s|KUBE_CONFIG=.*|KUBE_CONFIG=\"$(windows_kube_config_path)\"|g" test/conf/env.sh
        cat test/conf/env.sh
      displayName: 'Prepare Test Config'
    - bash: |
        kubePath=$(wslpath "C:\Users\$(azure.windows.user)\.kube\config")
        export KUBECONFIG="$kubePath"
        gcloud --quiet container clusters get-credentials $(gcp.cluster.name) --region $(gcp.cluster.region)
        gcloudPath="C:\\\Program Files (x86)\\\Google\\\Cloud SDK\\\google-cloud-sdk\\\bin\\\gcloud"
        sed -i "s|cmd-path:.*|cmd-path: $gcloudPath|g" $kubePath
      displayName: 'Connect to cluster'
    - bash: |
        set -o pipefail
        export WSL_KEY_FILE=$(wslpath "$(windows_ssh_key_path)/$(ssh_key_file)")
        echo $WSL_KEY_FILE
        test/run.bash functional-k8s | tee test/conf/results-functional-k8s.tap
      displayName: 'Run Functional Tests'
    - bash: |
        tap-junit -i test/conf/results-functional-k8s.tap -o test/conf -s K8s -n results-functional-k8s.xml || true
      displayName: 'Convert test output from TAP to JUnit'
      condition: succeededOrFailed()
    - bash: |
          test/clean.bash $(jobuuid)
      displayName: 'Clean K8s Cluster'
      condition: always()
    - template: templates/functional-post-test.yaml
    - template: templates/functional-clean-vm.yaml
      parameters:
        id: wink8s$(build)
        agent_count: 2
        controller_count: 0

  - job: Windows_Vanilla
    condition: or(and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/develop')), and(succeeded(), startsWith(variables['build.sourceBranch'], 'refs/tags/')))
    pool: 'Azure Windows'
    steps:
    - template: templates/ssh-steps.yaml
    - template: templates/functional-init-vm-steps.yaml
      parameters:
        id: win$(build)
        distro: $(gcp.vm.distro.stretch)
        repo: $(gcp.vm.repo.debian)
        agent_count: 1
        controller_count: 1
        windows: "true"
    - template: templates/configure-remote-tests.yaml
      parameters:
        windows: 'true'
    - task: DownloadSecureFile@1
      displayName: 'Download SSH keys to'
      name: 'gcp_iofogctl_rsa'
      inputs:
        secureFile: 'gcp_iofogctl_rsa'
    - bash: |
        destFolder=$(wslpath "$(windows_ssh_key_path)")
        echo "SSH downloaded at $(gcp_iofogctl_rsa.secureFilePath)"
        echo "Converting windows path to bash path"
        bashPath=$(wslpath "$(gcp_iofogctl_rsa.secureFilePath)")
        echo "Bash path = $bashPath"
        ls $bashPath
        mkdir -p $destFolder
        cp $bashPath $destFolder/$(ssh_key_file)
        echo "Copied SSH fey from $bashPath to $destFolder"
        chmod 0700 $destFolder
        chmod 0600 $destFolder/$(ssh_key_file)
        ls -la $destFolder
      displayName: Prepare SSH key
    - bash: |
        sed -i "s|KEY_FILE=.*|KEY_FILE=\"$(windows_ssh_key_path)/$(ssh_key_file)\"|g" test/conf/env.sh
        cat test/conf/env.sh
      displayName: 'Prepare Test Config'
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: windows
        downloadPath: $(System.DefaultWorkingDirectory)
    - bash: |
        dir=$(wslpath "C:\Users\$(azure.windows.user)\AppData\Local\Microsoft\WindowsApps")
        echo moving
        mv windows/iofogctl $dir/

        echo chmodding
        chmod +x $dir/iofogctl

        echo version
        $dir/iofogctl version
        iofogctl version
      displayName: 'Prepare iofogctl binary'
    - bash: |
        tempBashPath=$(wslpath "$(Agent.TempDirectory)")
        cd $tempBashPath
        git clone https://github.com/bats-core/bats-core.git && cd bats-core && git checkout tags/v1.1.0 && ./install.sh /usr
        bats --version
      displayName: 'Install Bats'
    - bash: |
        for file in $(find ./test -name '*.bash'); do dos2unix -o $file; done
        for file in $(find ./test -name '*.sh'); do dos2unix -o $file; done
        for file in $(find ./test -name '*.bats'); do dos2unix -o $file; done
      displayName: 'Format test files'
    - bash: |
        test/run.bash smoke
      displayName: 'Run Smoke Tests'
    - bash: |
        export WSL_KEY_FILE=$(wslpath "$(windows_ssh_key_path)/$(ssh_key_file)")
        echo $WSL_KEY_FILE
        test/run.bash functional-vanilla
      displayName: 'Run Functional Tests'
    - template: templates/functional-clean-vm.yaml
      parameters:
        id: win$(build)
        agent_count: 1
        controller_count: 1
    - bash: |
        rm -rf /mnt/c/Users/$(azure.windows.user)/.iofog/
      condition: always()
      displayName: 'Clean up Windows env'

  - job: Windows_Local
    condition: or(and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/develop')), and(succeeded(), startsWith(variables['build.sourceBranch'], 'refs/tags/')))
    pool: 'Azure Windows'
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: windows
        downloadPath: $(System.DefaultWorkingDirectory)
    - bash: |
        dir=/mnt/c/Users/$(azure.windows.user)/AppData/Local/Microsoft/WindowsApps/
        echo moving
        mv windows/iofogctl $dir

        echo chmodding
        chmod +x $dir/iofogctl

        echo version
        $dir/iofogctl version
        iofogctl version
      displayName: 'Prepare iofogctl binary'
    - bash: |
        if [[ -z $(which docker) ]]; then
          apt-get update -y
          apt-get install -y \
          apt-transport-https \
          ca-certificates \
          curl \
          software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          add-apt-repository \
          "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
          $(lsb_release -cs) \
          stable"
          apt-get update -y
          apt-get install -y docker-ce
          usermod -aG docker $USER
        fi
      displayName: Install docker if necessary
    - template: templates/init-gcloud-steps.yaml
      parameters:
        windows: "true"
    - bash: |
        if [[ -z $(echo $DOCKER_HOST) ]]; then
          export DOCKER_HOST="tcp://localhost:2375"
        fi
        gcloud --quiet auth configure-docker
        echo "$DOCKER_HOST"
        docker info
        docker "pull" "$(controller_image)"
        docker "pull" "$(agent_image)"
        docker "pull" "$(connector_image)"
      displayName: 'Pull develop gcr docker image'
      failOnStderr: false
    - bash: |
        sed -i "s|CONTROLLER_IMAGE=.*|CONTROLLER_IMAGE=\"$(controller_image)\"|g" test/env.sh
        sed -i "s|CONNECTOR_IMAGE=.*|CONNECTOR_IMAGE=\"$(connector_image)\"|g" test/env.sh
        sed -i "s|AGENT_IMAGE=.*|AGENT_IMAGE=\"$(agent_image)\"|g" test/env.sh
        NS=$(jobuuid)
        sed -i "s|NAMESPACE=.*|NAMESPACE=\"$NS\"|g" test/env.sh
        sed -i "s|PACKAGE_CLOUD_TOKEN=.*|PACKAGE_CLOUD_TOKEN=\"$(pkg.token)\"|g" test/env.sh
        cp test/env.sh test/conf
      displayName: 'Configure Local Tests'
    - template: templates/configure-remote-tests.yaml
    - bash: |
        tempBashPath=$(wslpath "$(Agent.TempDirectory)")
        cd $tempBashPath
        git clone https://github.com/bats-core/bats-core.git && cd bats-core && git checkout tags/v1.1.0 && ./install.sh /usr
        bats --version
      displayName: 'Install Bats'
    - bash: |
        for file in $(find ./test -name '*.bash'); do dos2unix -o $file; done
        for file in $(find ./test -name '*.sh'); do dos2unix -o $file; done
        for file in $(find ./test -name '*.bats'); do dos2unix -o $file; done
      displayName: 'Format test files'
    - bash: |
        if [[ -z $(echo $DOCKER_HOST) ]]; then
          export DOCKER_HOST="tcp://localhost:2375"
        fi
        set -o pipefail
        echo "$DOCKER_HOST"
        docker images
        export WSL_KEY_FILE=$(wslpath "$(windows_ssh_key_path)/$(ssh_key_file)")
        echo $WSL_KEY_FILE
        test/run.bash functional-local | tee test/conf/results-functional-local.tap
      displayName: 'Run Functional Tests'
    - script: |
        RD /S /Q "C:\Users\$(azure.windows.user)\.iofog\"
      condition: always()
      displayName: 'Clean local .iofog environment'
    - bash: |
        if [[ -z $(echo $DOCKER_HOST) ]]; then
          export DOCKER_HOST="tcp://localhost:2375"
        fi
        docker rm -f $(docker ps -aq)
        docker "system" "prune" "-af"
      condition: always()
      displayName: 'Clean local docker environment'
    
  - job: Vanilla_Xenial
    condition: and(succeeded(), startsWith(variables['build.sourceBranch'], 'refs/tags/'))
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - template: templates/test-vanilla-steps.yaml
      parameters:
        id: $(jobuuid)
        distro: $(gcp.vm.distro.xenial)
        repo: $(gcp.vm.repo.ubuntu)
        agent_count: 1
        controller_count: 1

  - job: Vanilla_Bionic
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - template: templates/test-vanilla-steps.yaml
      parameters:
        id: $(jobuuid)
        distro: $(gcp.vm.distro.bionic)
        repo: $(gcp.vm.repo.ubuntu)
        agent_count: 1
        controller_count: 1

  - job: Vanilla_Buster
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - template: templates/test-vanilla-steps.yaml
      parameters:
        id: $(jobuuid)
        distro: $(gcp.vm.distro.buster)
        repo: $(gcp.vm.repo.debian)
        agent_count: 1
        controller_count: 1

  - job: Vanilla_Stretch
    condition: and(succeeded(), startsWith(variables['build.sourceBranch'], 'refs/tags/'))
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - template: templates/test-vanilla-steps.yaml
      parameters:
        id: $(jobuuid)
        distro: $(gcp.vm.distro.stretch)
        repo: $(gcp.vm.repo.debian)
        agent_count: 1
        controller_count: 1

  - job: Local
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - template: templates/init-gcloud-steps.yaml
    - script: |
        gcloud --quiet auth configure-docker
        docker pull $(controller_image)
        docker pull $(agent_image)
        docker pull $(connector_image)
      displayName: 'Pull develop gcr docker image'
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: linux
        downloadPath: $(System.DefaultWorkingDirectory)
    - script: |
        sudo cp linux/iofogctl /usr/local/bin/
        sudo chmod 0755 /usr/local/bin/iofogctl
    - template: templates/postinstall-steps.yaml
    - script: |
        sed -i "s|CONTROLLER_IMAGE=.*|CONTROLLER_IMAGE=\"$(controller_image)\"|g" test/env.sh
        sed -i "s|CONNECTOR_IMAGE=.*|CONNECTOR_IMAGE=\"$(connector_image)\"|g" test/env.sh
        sed -i "s|AGENT_IMAGE=.*|AGENT_IMAGE=\"$(agent_image)\"|g" test/env.sh
        NS=$(jobuuid)
        sed -i "s|NAMESPACE=.*|NAMESPACE=\"$NS\"|g" test/env.sh
        sed -i "s|PACKAGE_CLOUD_TOKEN=.*|PACKAGE_CLOUD_TOKEN=\"$(pkg.token)\"|g" test/env.sh
        cp test/env.sh test/conf
      displayName: 'Configure Local Tests'
    - template: templates/configure-remote-tests.yaml
    - template: templates/install-test-deps.yaml
    - script: |
        test/run.bash smoke
      displayName: 'Run Smoke Tests'
    - script: |
        set -o pipefail
        test/run.bash functional-local | tee test/conf/results-functional-local.tap
      displayName: 'Run Functional Tests'
    - script: |
        tap-junit -i test/conf/results-functional-local.tap -o test/conf -s Local -n results-functional-local.xml || true
      displayName: 'Convert test output from TAP to JUnit'
      condition: succeededOrFailed()
    - template: templates/functional-post-test.yaml
    - script: |
        docker system prune -af
      condition: always()
      displayName: 'Clean local docker'

  - job: K8s
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: linux
        downloadPath: $(System.DefaultWorkingDirectory)
    - script: |
        sudo cp linux/iofogctl /usr/local/bin/
        sudo chmod 0755 /usr/local/bin/iofogctl
    - template: templates/postinstall-steps.yaml
    - template: templates/ssh-steps.yaml
    - template: templates/functional-init-vm-steps.yaml
      parameters:
        id: $(jobuuid)
        distro: $(gcp.vm.distro.stretch)
        repo: $(gcp.vm.repo.debian)
        agent_count: 2
        controller_count: 0
    - script: |
        gcloud --quiet container clusters get-credentials $(gcp.cluster.name) --region $(gcp.cluster.region)
      displayName: 'Connect to cluster'
    - template: templates/configure-remote-tests.yaml
    - template: templates/install-test-deps.yaml
    - script: |
        set -o pipefail
        test/run.bash functional-k8s | tee test/conf/results-functional-k8s.tap
      displayName: 'Run Functional Tests'
    - script: |
        tap-junit -i test/conf/results-functional-k8s.tap -o test/conf -s K8s -n results-functional-k8s.xml || true
      displayName: 'Convert test output from TAP to JUnit'
      condition: succeededOrFailed()
    - script: |
          test/clean.bash $(jobuuid)
      displayName: 'Clean K8s Cluster'
      condition: always()
    - template: templates/functional-post-test.yaml
    - template: templates/functional-clean-vm.yaml
      parameters:
        id: $(jobuuid)
        agent_count: 2
        controller_count: 0

  - job: HA
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: linux
        downloadPath: $(System.DefaultWorkingDirectory)
    - script: |
        sudo cp linux/iofogctl /usr/local/bin/
        sudo chmod 0755 /usr/local/bin/iofogctl
    - template: templates/postinstall-steps.yaml
    - template: templates/ssh-steps.yaml
    - template: templates/functional-init-vm-steps.yaml
      parameters:
        id: $(jobuuid)
        distro: $(gcp.vm.distro.buster)
        repo: $(gcp.vm.repo.debian)
        agent_count: 2
        controller_count: 0
    - script: |
        gcloud --quiet container clusters get-credentials $(gcp.cluster.name) --region $(gcp.cluster.region)
      displayName: 'Connect to cluster'
    - script: |
        sed -i "s|DB_PROVIDER=.*|DB_PROVIDER=\"postgres\"|g" test/env.sh
        sed -i "s|DB_USER=.*|DB_USER=\"$(db.user)\"|g" test/env.sh
        sed -i "s|DB_HOST=.*|DB_HOST=\"postgres-postgresql.postgres.svc.cluster.local\"|g" test/env.sh
        sed -i "s|DB_PORT=.*|DB_PORT=5432|g" test/env.sh
        sed -i "s|DB_PW=.*|DB_PW=\"$(db.pw)\"|g" test/env.sh
        sed -i "s|DB_NAME=.*|DB_NAME=\"iofog$(jobuuid)\"|g" test/env.sh
        sed -i "s|CONTROLLER_IMAGE=.*|CONTROLLER_IMAGE=\"$(enterprise_image)\"|g" test/env.sh
      displayName: 'Set up Postgres on K8s cluster'
    - template: templates/configure-remote-tests.yaml
    - template: templates/install-test-deps.yaml
    - script: |
        set -o pipefail
        test/run.bash functional-ha | tee test/conf/results-functional-ha.tap
      displayName: 'Run Functional Tests'
    - script: |
        tap-junit -i test/conf/results-functional-ha.tap -o test/conf -s HA -n results-functional-ha.xml || true
      displayName: 'Convert test output from TAP to JUnit'
      condition: succeededOrFailed()
    - script: |
          test/clean.bash $(jobuuid)
      displayName: 'Clean K8s Cluster'
      condition: always()
    - template: templates/functional-post-test.yaml
    - template: templates/functional-clean-vm.yaml
      parameters:
        id: $(jobuuid)
        agent_count: 2
        controller_count: 0

- stage: Publish
  condition: or(and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/develop')), and(succeeded(), startsWith(variables['build.sourceBranch'], 'refs/tags/')))
  jobs:

  - job: OSX
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: darwin
        downloadPath: $(System.DefaultWorkingDirectory)
    - template: templates/init-gcloud-steps.yaml
    - template: templates/version-steps.yaml
    - template: templates/ssh-steps.yaml
    - script: |
        . version
        short_version=$MAJOR.$MINOR
        tar -zcf iofogctl.tar.gz darwin/iofogctl
        checksum=$(shasum -a 256 iofogctl.tar.gz | awk '{ print $1 }')
        gsutil cp iofogctl.tar.gz gs://$(gcp.bucket.osx)/$short_version/
        gsutil acl set public-read  gs://$(gcp.bucket.osx)/$short_version/iofogctl.tar.gz
        git config --global user.email "serge@edgeworx.io"
        git config --global user.name "Serge Radinovich"
        git clone git@github.com:eclipse-iofog/homebrew-iofogctl.git
        cd homebrew-iofogctl
        brew_file=iofogctl@$MAJOR.$MINOR.rb
        if [ ! -f $brew_file ]; then
          cat ../templates/brew.tpl > $brew_file
          sed -i "s/<AT_VERSION>/$MAJOR$MINOR/g" $brew_file
          sed -i "s/<DEV_SHA256>/$checksum/g" $brew_file
          sed -i "s/<URL>/$(gcp.bucket.url)/g" $brew_file
          sed -i "s/<DEV_BUCKET>/$(gcp.bucket.osx)/g" $brew_file
          sed -i "s/<DEV_VERSION>/$(version)/g" $brew_file
        else
          sed -i "s/    sha256.*/    sha256 \"$checksum\"/g" $brew_file
          sed -i "s/    version.*/    version \"$(version)\"/g" $brew_file
          sed -i "s|    url .*|    url \"$(gcp.bucket.url)/$(gcp.bucket.osx)/$short_version/iofogctl.tar.gz\"|g" $brew_file
        fi
        git add $brew_file
        git commit -m "Publish develop version $(version)"
        git push origin master
      displayName: 'Build and publish OSX binary'

  - job: Debian
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: linux
        downloadPath: $(System.DefaultWorkingDirectory)
    - script: |
        sudo cp linux/iofogctl /usr/local/bin/
        sudo chmod 0755 /usr/local/bin/iofogctl
    - template: templates/version-steps.yaml
    - template: templates/publish-deps.yaml
    - script: |
        fpm -f -s dir -t deb -n iofogctl -v $(version) /usr/local/bin/iofogctl=/usr/local/bin/
        package=$(ls | grep *.deb)
        echo $package
        cp $package $(Build.ArtifactStagingDirectory)
      displayName: 'Create Debian package'
    - script: |
        package=$(ls | grep *.deb)
        echo "package..."
        echo $package
        declare -a UBUNTU_VERS=("xenial" "bionic")
        declare -a DEBIAN_VERS=("stretch" "buster")
        for ubu in "${UBUNTU_VERS[@]}"
        do
            package_cloud yank iofog/iofogctl-snapshots/ubuntu/${ubu} $package --config=$(Agent.TempDirectory)/package_cloud || true
            package_cloud push iofog/iofogctl-snapshots/ubuntu/${ubu} $package --config=$(Agent.TempDirectory)/package_cloud
        done
        for deb in "${DEBIAN_VERS[@]}"
        do
            package_cloud yank iofog/iofogctl-snapshots/debian/${deb} $package --config=$(Agent.TempDirectory)/package_cloud || true
            package_cloud push iofog/iofogctl-snapshots/debian/${deb} $package --config=$(Agent.TempDirectory)/package_cloud
        done
      displayName: 'Publish deb to package-cloud'

  - job: RPM
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: linux
        downloadPath: $(System.DefaultWorkingDirectory)
    - script: sudo cp linux/iofogctl /usr/local/bin/
    - template: templates/version-steps.yaml
    - template: templates/publish-deps.yaml
    - script: |
        fpm -f -s dir -t rpm -n iofogctl -v $(version) /usr/local/bin/iofogctl=/usr/local/bin/
        package=$(ls | grep *.rpm)
        echo $package
        cp $package $(Build.ArtifactStagingDirectory)
      displayName: 'Create RPM package'
    - script: |
        package=$(ls | grep *.rpm)
        echo "package..."
        echo $package
        declare -a FEDORA_VERS=("23" "24")
        declare -a REDHAT_VERS=("6" "7")
        for fed in ${FEDORA_VERS[@]}
        do
            package_cloud yank iofog/iofogctl-snapshots/fedora/${fed} $package --config=$(Agent.TempDirectory)/package_cloud || true
            package_cloud push iofog/iofogctl-snapshots/fedora/${fed} $package --config=$(Agent.TempDirectory)/package_cloud
        done
        for red in ${REDHAT_VERS[@]}
        do
            package_cloud yank iofog/iofogctl-snapshots/el/${red} $package --config=$(Agent.TempDirectory)/package_cloud || true
            package_cloud push iofog/iofogctl-snapshots/el/${red} $package --config=$(Agent.TempDirectory)/package_cloud
        done
      displayName: 'Publish RPM to package-cloud'

  - job: Windows
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: windows
        downloadPath: $(System.DefaultWorkingDirectory)
    - template: templates/init-gcloud-steps.yaml
    - template: templates/version-steps.yaml
    - template: templates/ssh-steps.yaml
    - script: |
        . version
        DIR="$(gcp.bucket.win)/$MAJOR.$MINOR"
        gsutil cp windows/iofogctl gs://$DIR/iofogctl.exe
        gsutil acl set public-read  gs://$DIR/iofogctl.exe
      displayName: 'Publish Windows binary'
 