steps:
- template: init-gcloud-steps.yaml
- script: |
    agent_list=""
    for idx in $(seq 1 $(agent_count)); do
      gcloud compute --project=$(gcp.project.name) instances create iofogctl-ci-$(jobuuid)-$idx --zone=$(gcp.vm.zone) --machine-type=n1-standard-1 --subnet=default --network-tier=PREMIUM --maintenance-policy=MIGRATE --service-account=$(gcp.svcacc.name) --scopes=https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append --image=$(distro) --image-project=$(repo) --boot-disk-size=200GB --boot-disk-type=pd-standard --boot-disk-device-name=iofogctl-ci-$(jobuuid)-$idx
      vm_host=$(gcloud compute instances list | grep iofogctl-ci-$(jobuuid)-$idx | awk '{print $5}')
      agent_list="$(gcp.vm.user)@$vm_host $agent_list"
    done
    agent_list=$(echo "$agent_list" | awk '{$1=$1;print}')
    echo "##vso[task.setvariable variable=agent_vm_list]$agent_list"
    if [ $(controller_count) -gt 0 ]; then
      count=$(agent_count)
      idx=$((count+1))
      gcloud compute --project=$(gcp.project.name) instances create iofogctl-ci-$(jobuuid)-$idx --zone=$(gcp.vm.zone) --machine-type=n1-standard-1 --subnet=default --network-tier=PREMIUM --maintenance-policy=MIGRATE --service-account=$(gcp.svcacc.name) --scopes=https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append --image=$(distro) --image-project=$(repo) --boot-disk-size=200GB --boot-disk-type=pd-standard --boot-disk-device-name=iofogctl-ci-$(jobuuid)-$idx
      vm_host=$(gcloud compute instances list | grep iofogctl-ci-$(jobuuid)-$idx | awk '{print $5}')
      echo "##vso[task.setvariable variable=controller_vm]$(gcp.vm.user)@$vm_host"
    fi
  displayName: 'Deploy Test VMs'
- script: |
    sed -i "s|AGENT_LIST=.*|AGENT_LIST=\"$(agent_vm_list)\"|g" test/env.sh
    sed -i "s|VANILLA_CONTROLLER=.*|VANILLA_CONTROLLER=\"$(controller_vm)\"|g" test/env.sh
    sed -i "s|KUBE_CONFIG=.*|KUBE_CONFIG=\"~/.kube/config\"|g" test/env.sh
    sed -i "s|KEY_FILE=.*|KEY_FILE=\"~/id_rsa\"|g" test/env.sh
    cat $(Agent.TempDirectory)/id_rsa > ~/id_rsa
    echo $(ssh.user.pub) > ~/id_rsa.pub
  displayName: 'Configure VM Tests'