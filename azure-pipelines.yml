trigger:
  tags:
    include:
      - v*
  branches:
    include:
      - develop
      - release/*
  paths:
    exclude:
      - README.md
      - docs/

variables:
  build: $(Build.BuildId)
  jobuuid: $(Build.BuildId)$(Agent.Id)
  GOROOT: '/usr/local/go1.12' # Go installation path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code
  ref: $(Build.SourceBranch)
  branch: $(Build.SourceBranchName)
  version:
  vm_count: 3
  vm_1:
  vm_2:
  vm_3:

stages:
- stage: Build
  jobs:
  - job: Iofogctl
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - template: templates/version-steps.yaml
    - template: templates/prebuild-steps.yaml
    - script: |
        VERSION=$(version) make build
      workingDirectory: '$(modulePath)'
      displayName: 'Build Linux version'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(modulePath)/bin'
        artifactName: iofogctl-linux
    - script: |
        GOOS=darwin VERSION=$(version) make build
      workingDirectory: '$(modulePath)'
      displayName: 'Build OSX Binary'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(modulePath)/bin'
        artifactName: iofogctl-osx
    
- stage: Test
  jobs:
  - job: Vanilla
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - template: templates/workdir-steps.yaml
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: iofogctl-linux
        downloadPath: $(System.DefaultWorkingDirectory)
    - script: |
        sudo cp $(System.DefaultWorkingDirectory)/iofogctl-linux/iofogctl /usr/local/bin/
        sudo chmod 0755 /usr/local/bin/iofogctl
    - template: templates/postinstall-steps.yaml
    - template: templates/ssh-steps.yaml
    - template: templates/functional-init-vm-steps.yaml
    - template: templates/functional-configure.yaml
    - script: |
        for IDX in $(seq 1 $(vm_count)); do
          gcloud compute ssh iofogctl-ci-$(jobuuid)-$IDX --zone $(gcp.vm.zone) -- ls /
        done
      displayName: 'Wait for VM SSH access'
    - script: |
        set -o pipefail
        test/run.bash functional-vanilla | tee test/conf/results-functional-vanilla.tap
      workingDirectory: '$(modulePath)'
      displayName: 'Run Functional Tests'
    - script: |
        tap-junit -i test/conf/results-functional-vanilla.tap -o test/conf -s Vanilla -n results-functional-vanilla.xml
      workingDirectory: '$(modulePath)'
      displayName: 'Convert test output from TAP to JUnit'
      condition: succeededOrFailed()
    - template: templates/functional-post-test.yaml
    - template: templates/functional-clean-vm.yaml
  - job: Local
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - template: templates/workdir-steps.yaml
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: iofogctl-linux
        downloadPath: $(System.DefaultWorkingDirectory)
    - script: |
        sudo cp $(System.DefaultWorkingDirectory)/iofogctl-linux/iofogctl /usr/local/bin/
        sudo chmod 0755 /usr/local/bin/iofogctl
    - template: templates/postinstall-steps.yaml
    - template: templates/functional-configure.yaml
    - script: |
        set -o pipefail
        test/run.bash functional-local | tee test/conf/results-functional-local.tap
      workingDirectory: '$(modulePath)'
      displayName: 'Run Functional Tests'
    - script: |
        tap-junit -i test/conf/results-functional-local.tap -o test/conf -s Local -n results-functional-local.xml
      workingDirectory: '$(modulePath)'
      displayName: 'Convert test output from TAP to JUnit'
      condition: succeededOrFailed()
    - template: templates/functional-post-test.yaml
    - script: |
        docker system prune -af
      workingDirectory: '$(modulePath)'
      condition: always()
      displayName: 'Clean local docker'
  - job: K8s
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - template: templates/workdir-steps.yaml
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: iofogctl-linux
        downloadPath: $(System.DefaultWorkingDirectory)
    - script: |
        sudo cp $(System.DefaultWorkingDirectory)/iofogctl-linux/iofogctl /usr/local/bin/
        sudo chmod 0755 /usr/local/bin/iofogctl
    - template: templates/postinstall-steps.yaml
    - template: templates/ssh-steps.yaml
    - script: echo "##vso[task.setvariable variable=vm_count]2"
    - template: templates/functional-init-vm-steps.yaml
    - template: templates/functional-configure.yaml
    - script: |
        set -o pipefail
        test/run.bash functional-k8s | tee test/conf/results-functional-k8s.tap
      workingDirectory: '$(modulePath)'
      displayName: 'Run Functional Tests'
    - script: |
        tap-junit -i test/conf/results-functional-k8s.tap -o test/conf -s K8s -n results-functional-k8s.xml
      workingDirectory: '$(modulePath)'
      displayName: 'Convert test output from TAP to JUnit'
      condition: succeededOrFailed()
    - script: |
          test/clean.bash $(jobuuid)
      workingDirectory: '$(modulePath)'
      displayName: 'Clean K8s Cluster'
      condition: always()
    - template: templates/functional-post-test.yaml
    - template: templates/functional-clean-vm.yaml
  - job: HA
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - template: templates/workdir-steps.yaml
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: iofogctl-linux
        downloadPath: $(System.DefaultWorkingDirectory)
    - script: |
        sudo cp $(System.DefaultWorkingDirectory)/iofogctl-linux/iofogctl /usr/local/bin/
        sudo chmod 0755 /usr/local/bin/iofogctl
    - template: templates/postinstall-steps.yaml
    - template: templates/ssh-steps.yaml
    - script: echo "##vso[task.setvariable variable=vm_count]2"
    - template: templates/functional-init-vm-steps.yaml
    - script: |
        curl -Lo helm.tar.gz https://storage.googleapis.com/kubernetes-helm/helm-v2.13.1-linux-amd64.tar.gz
        tar -xf helm.tar.gz
        rm helm.tar.gz
        sudo mv linux-amd64/helm /usr/local/bin
        chmod +x /usr/local/bin/helm
        rm -r linux-amd64
      displayName: 'Install Helm'
    - script: |
        helm install --set postgresqlUsername=$(db.user),postgresqlPassword=$(db.pw),persistence.size=1Gi --namespace $(jobuuid) --name $(jobuuid) stable/postgresql
        sed -i "s|DB_PROVIDER=.*|DB_PROVIDER=\"postgres\"|g" test/env.sh
        sed -i "s|DB_USER=.*|DB_USER=\"$(db.user)\"|g" test/env.sh
        sed -i "s|DB_HOST=.*|DB_HOST=\"$(jobuuid)-postgresql.$(jobuuid).svc.cluster.local\"|g" test/env.sh
        sed -i "s|DB_PORT=.*|DB_PORT=5432|g" test/env.sh
        sed -i "s|DB_PW=.*|DB_PW=\"$(db.pw)\"|g" test/env.sh
        sed -i "s|DB_NAME=.*|DB_NAME=\"$(jobuuid)\"|g" test/env.sh
        sed -i "s|CONTROLLER_IMAGE=.*|CONTROLLER_IMAGE=\"docker.io/edgeworx/enterprise-controller:latest\"|g" test/env.sh
      workingDirectory: '$(modulePath)'
      displayName: 'Set up Postgres on K8s cluster'
    - template: templates/functional-configure.yaml
    - script: |
        set -o pipefail
        test/run.bash functional-ha | tee test/conf/results-functional-ha.tap
      workingDirectory: '$(modulePath)'
      displayName: 'Run Functional Tests'
    - script: |
        tap-junit -i test/conf/results-functional-ha.tap -o test/conf -s HA -n results-functional-ha.xml
      workingDirectory: '$(modulePath)'
      displayName: 'Convert test output from TAP to JUnit'
      condition: succeededOrFailed()
    - script: |
          test/clean.bash $(jobuuid)
          helm del --purge pg-$(jobuuid)
          kubectl get persistentvolumeclaims -n $(jobuuid) | awk 'FNR == 2 {print $1}'
          kubectl delete namespace pg-$(jobuuid)
      workingDirectory: '$(modulePath)'
      displayName: 'Clean K8s Cluster'
      condition: always()
    - template: templates/functional-post-test.yaml
    - template: templates/functional-clean-vm.yaml

- stage: Publish
  condition: or(and(succeeded(), startsWith(variables['build.sourceBranch'], 'refs/heads/release/')), and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/develop')), and(succeeded(), startsWith(variables['build.sourceBranch'], 'refs/tags/')))
  jobs:
  - job: OSX
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - template: templates/workdir-steps.yaml
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: iofogctl-osx
        downloadPath: $(System.DefaultWorkingDirectory)
    - script: |
        mkdir bin
        cp $(System.DefaultWorkingDirectory)/iofogctl-osx/iofogctl bin/
      displayName: 'Download OSX Binary'
      workingDirectory: '$(modulePath)'
    - template: templates/version-steps.yaml
    - template: templates/ssh-steps.yaml
    - script: |
        tar -zcf iofogctl.tar.gz bin/iofogctl
        checksum=$(shasum -a 256 iofogctl.tar.gz | awk '{ print $1 }')
        cp iofogctl.tar.gz $(Build.ArtifactStagingDirectory)/$(version).tar.gz
        echo $(version) > $(Build.ArtifactStagingDirectory)/version.txt
        rsync -e "ssh -o StrictHostKeyChecking=no" iofogctl.tar.gz $(ssh.downloads):/var/www/vhosts/edgeworx.io/downloads/iofogctl/dev/$(version).tar.gz
        git config --global user.email "serge@edgeworx.io"
        git config --global user.name "Serge Radinovich"
        git clone git@github.com:eclipse-iofog/homebrew-iofogctl.git
        cd homebrew-iofogctl
        sed -i "s/    sha256.*/    sha256 \"$checksum\"/g" iofogctl.rb
        sed -i "s/    version.*/    version \"$(version)\"/g" iofogctl.rb
        sed -i "s|http://edgeworx.io/downloads/iofogctl/dev/.*\.tar\.gz\"|http://edgeworx.io/downloads/iofogctl/dev/$(version).tar.gz\"|g" iofogctl.rb
        git add iofogctl.rb
        git commit -m "Publish develop version $(version)"
        git push origin master
      workingDirectory: '$(modulePath)'
      displayName: 'Build and publish OSX binary'
    - template: templates/publish-steps.yaml
  - job: Debian
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: iofogctl-linux
        downloadPath: $(System.DefaultWorkingDirectory)
    - script: |
        sudo cp $(System.DefaultWorkingDirectory)/iofogctl-linux/iofogctl /usr/local/bin/
        sudo chmod 0755 /usr/local/bin/iofogctl
    - template: templates/version-steps.yaml
    - template: templates/publish-deps.yaml
    - script: |
        fpm -f -s dir -t deb -n iofogctl -v $(version) /usr/local/bin/iofogctl=/usr/local/bin/
        package=$(ls | grep *.deb)
        echo $package
        cp $package $(Build.ArtifactStagingDirectory)
      displayName: 'Create Debian package'
    - script: |
        package=$(ls | grep *.deb)
        echo "package..."
        echo $package
        declare -a UBUNTU_VERS=("precise" "trusty" "utopic" "vivid" "wily" "xenial" "bionic")
        declare -a DEBIAN_VERS=("wheezy" "jessie" "stretch" "buster")
        for ubu in "${UBUNTU_VERS[@]}"
        do
            package_cloud push iofog/iofogctl-snapshots/ubuntu/${ubu} $package --config=$(Agent.TempDirectory)/package_cloud
        done
        for deb in "${DEBIAN_VERS[@]}"
        do
            package_cloud push iofog/iofogctl-snapshots/debian/${deb} $package --config=$(Agent.TempDirectory)/package_cloud
            package_cloud push iofog/iofogctl-snapshots/raspbian/${deb} $package --config=$(Agent.TempDirectory)/package_cloud
        done
      displayName: 'Publish deb to package-cloud'
    - template: templates/publish-steps.yaml
  - job: RPM
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: iofogctl-linux
        downloadPath: $(System.DefaultWorkingDirectory)
    - script: sudo cp $(System.DefaultWorkingDirectory)/iofogctl-linux/iofogctl /usr/local/bin/
    - template: templates/version-steps.yaml
    - template: templates/publish-deps.yaml
    - script: |
        fpm -f -s dir -t rpm -n iofogctl -v $(version) /usr/local/bin/iofogctl=/usr/local/bin/
        package=$(ls | grep *.rpm)
        echo $package
        cp $package $(Build.ArtifactStagingDirectory)
      displayName: 'Create RPM package'
    - script: |
        package=$(ls | grep *.rpm)
        echo "package..."
        echo $package
        declare -a FEDORA_VERS=("22" "23" "24")
        declare -a REDHAT_VERS=("6" "7")
        for fed in ${FEDORA_VERS[@]}
        do
            package_cloud push iofog/iofogctl-snapshots/fedora/${fed} $package --config=$(Agent.TempDirectory)/package_cloud
        done
        for red in ${REDHAT_VERS[@]}
        do
            package_cloud push iofog/iofogctl-snapshots/el/${red} $package --config=$(Agent.TempDirectory)/package_cloud
        done
      displayName: 'Publish RPM to package-cloud'
    - template: templates/publish-steps.yaml